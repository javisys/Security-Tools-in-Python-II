# Javier Ferrándiz Fernández - https://github.com/javisys
import hashlib
import os
import re
import requests

# VirusTotal API Key (replace 'your_virustotal_api_key' with your actual key)
VIRUSTOTAL_API_KEY = ""

def hash_file(file_path):
    """Compute SHA256 hash of a file."""
    try:
        with open(file_path, "rb") as f:
            file_data = f.read()
            sha256_hash = hashlib.sha256(file_data).hexdigest()
            return sha256_hash
    except Exception as e:
        print(f"[ERROR] Could not hash the file: {e}")
        return None

def check_virustotal(file_hash):
    """Check file hash against VirusTotal API."""
    if not VIRUSTOTAL_API_KEY:
        print("[INFO] VirusTotal API key not set. Skipping VirusTotal check.")
        return None

    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            result = response.json()
            last_analysis = result.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
            return last_analysis
        elif response.status_code == 404:
            print("[INFO] Hash not found in VirusTotal database.")
            return None
        else:
            print(f"[ERROR] VirusTotal API returned status code {response.status_code}.")
            return None
    except Exception as e:
        print(f"[ERROR] Could not connect to VirusTotal: {e}")
        return None

def extract_strings(file_path, min_length=4):
    """Extract readable strings from a binary file."""
    try:
        with open(file_path, "rb") as f:
            data = f.read()
            pattern = rb"[A-Za-z0-9/\-:.,_$%'\"()?!\s]{" + str(min_length).encode() + rb",}"
            strings = re.findall(pattern, data)
            return [s.decode('utf-8', errors='ignore') for s in strings]
    except Exception as e:
        print(f"[ERROR] Could not extract strings: {e}")
        return []

def main():
    file_path = input("Enter the path to the binary file: ").strip()

    # Validate file existence
    if not os.path.isfile(file_path):
        print(f"[ERROR] File not found: {file_path}")
        return

    print(f"\n[INFO] Analyzing file: {file_path}")

    # Hash the file
    file_hash = hash_file(file_path)
    if file_hash:
        print(f"[INFO] SHA256 Hash: {file_hash}")

    # Check against VirusTotal
    if file_hash:
        vt_result = check_virustotal(file_hash)
        if vt_result:
            print("\n[INFO] VirusTotal Analysis Results:")
            print(f"  - Malicious: {vt_result.get('malicious', 0)}")
            print(f"  - Suspicious: {vt_result.get('suspicious', 0)}")
            print(f"  - Undetected: {vt_result.get('undetected', 0)}")
        else:
            print("[INFO] File not found or no malicious activity reported on VirusTotal.")

    # Extract strings from the binary
    print("\n[INFO] Extracting readable strings from the binary...")
    strings = extract_strings(file_path)
    if strings:
        print(f"[INFO] Found {len(strings)} readable strings. Here are some examples:")
        print("\n".join(strings[:10]))
    else:
        print("[INFO] No readable strings found.")

    print("\n[INFO] Analysis completed.")

if __name__ == "__main__":
    main()
